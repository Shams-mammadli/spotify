plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
}

group = "${groupName}"
version = "${appVersion}"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(javaVersion.toInteger())
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// spring web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// lombok
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	// mysql
	runtimeOnly "com.mysql:mysql-connector-j:${mysqlConnectorVersion}"

	// jwt
	implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

	// swagger ui
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${swaggerVersion}"

	// testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// group = az.hamburg.it  (ümumi package adını da dəyişin)
// springBootVersion, dependencyManagementVersion, groupName, javaVersion,